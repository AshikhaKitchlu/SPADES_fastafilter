#!/usr/bin/env python

__author__="Ashikha"

#To filter the fasta sequences of contigs generated by SPADES based on provided length and coverage (optional) of the contigs

import csv, pathlib, argparse, glob, os

#Using argparse to collect the arguments for folder locations of SPADES contig fasta file and tabular file and for length and coverage (optional)

parser=argparse.ArgumentParser(description="Description: Filter the contigs based on length and coverage (optional)")
parser.add_argument('-ffol', '--fasta_folder_loc', help="Give location of the folder containing the SPADES fasta file", required=True)
parser.add_argument('-tfol', '--tab_folder_loc', help="Give location of the folder containing the SPADES tabular file", required=True)
parser.add_argument('-l', '--length', help="Give the minimum length of the contig above which contigs have to be collected", type=int, required=True)
parser.add_argument('-c', '--coverage', help="Give the minimum coverage of the contig above which contigs have to be collected", type=int, required=False)

args=parser.parse_args()

#For creating an empty output folder and getting its path
os.mkdir('output')
os.chdir('output')
out_dir=os.getcwd()

#Changing to folder containing fasta files, creating a list containing all the ids in the folder and finding the extension of the fasta files for later use
os.chdir(args.fasta_folder_loc)
id_list=[]
for f_path in glob.glob("*.fasta"):
    id_w_ext=pathlib.Path(f_path).stem
    id_wo_ext=id_w_ext.split(".")[0]
    id_list.append(id_wo_ext)

def finding_ext():
    return ".fastq" if id_w_ext.endswith(".fastq") else ".fastq.gz"

ext=finding_ext()


#Opening the folder containing the tabular files and converting them to .csv file format 
for path in pathlib.Path(args.tab_folder_loc).glob("*.tabular"):
    with path.open() as txtfile, path.with_suffix(".csv").open(mode="w",newline='') as excelfile:
        reader = csv.reader(txtfile, delimiter = '\t')
        writer = csv.writer(excelfile)
        for row in reader:
            writer.writerow(row)      

#open all the files with the extension .csv file format, filter each of them based on length and coverage (optional) and then collect the remaining node number list
os.chdir(args.tab_folder_loc)

for file in glob.glob("*.csv"):
    list_of_genes=["\n"]
    with open(file,'r+') as fin:
        next(fin) #skip the header row
        for sheet in csv.reader(fin, delimiter=' '):
            for row in csv.reader(sheet, delimiter=','):
                if args.coverage:
                    if int(row[1])>=args.length and int(float(row[2]))>=args.coverage:
                        genes=(row[0])
                        list_of_genes.append(genes+"\n")
                else:
                    if int(row[1])>=args.length:
                        genes=(row[0])
                        list_of_genes.append(genes+"\n")

        fin.truncate(0)
        fin.writelines(list_of_genes)

#To collect the fasta sequence of the corresponding node number from each fasta file
from Bio import SeqIO
for i in id_list:
    out_loc=os.path.join(out_dir, i+'_output.fasta')
    file1=open(out_loc,'w')
    csv_loc=os.path.join(args.tab_folder_loc, i+ext+'.csv')
    node_list=open(csv_loc,'r').read().splitlines()
    fasta_loc=os.path.join(args.fasta_folder_loc, i+ext+'.fasta')
    for seq_record in SeqIO.parse(fasta_loc,'fasta'):    
        for j in node_list:
            desc=seq_record.description
            node_split=desc.split("_")
            new_list=node_split[0:2]
            node_no="_".join(new_list)
            if (str(j)==node_no):
                seqs=str(">"+desc+"\n"+seq_record.seq+"\n")
                file1.write(seqs)
file1.close()
